{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "51125992",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: imbalanced-learn in c:\\programdata\\anaconda3\\lib\\site-packages (0.9.1)\n",
      "Requirement already satisfied: scikit-learn>=1.1.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from imbalanced-learn) (1.1.2)\n",
      "Requirement already satisfied: numpy>=1.17.3 in c:\\users\\marios tirovolas\\appdata\\roaming\\python\\python39\\site-packages (from imbalanced-learn) (1.20.3)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from imbalanced-learn) (2.2.0)\n",
      "Requirement already satisfied: joblib>=1.0.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from imbalanced-learn) (1.1.0)\n",
      "Requirement already satisfied: scipy>=1.3.2 in c:\\users\\marios tirovolas\\appdata\\roaming\\python\\python39\\site-packages (from imbalanced-learn) (1.9.3)\n",
      "Requirement already satisfied: lightgbm in c:\\users\\marios tirovolas\\appdata\\roaming\\python\\python39\\site-packages (3.3.2)\n",
      "Requirement already satisfied: scipy in c:\\users\\marios tirovolas\\appdata\\roaming\\python\\python39\\site-packages (from lightgbm) (1.9.3)\n",
      "Requirement already satisfied: scikit-learn!=0.22.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from lightgbm) (1.1.2)\n",
      "Requirement already satisfied: wheel in c:\\programdata\\anaconda3\\lib\\site-packages (from lightgbm) (0.37.0)\n",
      "Requirement already satisfied: numpy in c:\\users\\marios tirovolas\\appdata\\roaming\\python\\python39\\site-packages (from lightgbm) (1.20.3)\n",
      "Requirement already satisfied: joblib>=1.0.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from scikit-learn!=0.22.0->lightgbm) (1.1.0)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from scikit-learn!=0.22.0->lightgbm) (2.2.0)\n",
      "Requirement already satisfied: wittgenstein in c:\\programdata\\anaconda3\\lib\\site-packages (0.3.2)\n",
      "Requirement already satisfied: pandas in c:\\users\\marios tirovolas\\appdata\\roaming\\python\\python39\\site-packages (from wittgenstein) (1.3.3)\n",
      "Requirement already satisfied: numpy in c:\\users\\marios tirovolas\\appdata\\roaming\\python\\python39\\site-packages (from wittgenstein) (1.20.3)\n",
      "Requirement already satisfied: python-dateutil>=2.7.3 in c:\\programdata\\anaconda3\\lib\\site-packages (from pandas->wittgenstein) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2017.3 in c:\\programdata\\anaconda3\\lib\\site-packages (from pandas->wittgenstein) (2021.3)\n",
      "Requirement already satisfied: six>=1.5 in c:\\programdata\\anaconda3\\lib\\site-packages (from python-dateutil>=2.7.3->pandas->wittgenstein) (1.16.0)\n",
      "Requirement already satisfied: explainerdashboard in c:\\programdata\\anaconda3\\lib\\site-packages (0.4.0)\n",
      "Requirement already satisfied: dtreeviz>=1.3 in c:\\programdata\\anaconda3\\lib\\site-packages (from explainerdashboard) (1.4.0)\n",
      "Requirement already satisfied: dash>=2.3.1 in c:\\users\\marios tirovolas\\appdata\\roaming\\python\\python39\\site-packages (from explainerdashboard) (2.6.2)\n",
      "Requirement already satisfied: flask-simplelogin in c:\\programdata\\anaconda3\\lib\\site-packages (from explainerdashboard) (0.1.1)\n",
      "Requirement already satisfied: click in c:\\programdata\\anaconda3\\lib\\site-packages (from explainerdashboard) (8.0.3)\n",
      "Requirement already satisfied: oyaml in c:\\programdata\\anaconda3\\lib\\site-packages (from explainerdashboard) (1.0)\n",
      "Requirement already satisfied: scikit-learn>=1.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from explainerdashboard) (1.1.2)\n",
      "Requirement already satisfied: dash-bootstrap-components>=1 in c:\\programdata\\anaconda3\\lib\\site-packages (from explainerdashboard) (1.2.1)\n",
      "Requirement already satisfied: jupyter-dash in c:\\programdata\\anaconda3\\lib\\site-packages (from explainerdashboard) (0.4.2)\n",
      "Requirement already satisfied: joblib in c:\\programdata\\anaconda3\\lib\\site-packages (from explainerdashboard) (1.1.0)\n",
      "Requirement already satisfied: numpy in c:\\users\\marios tirovolas\\appdata\\roaming\\python\\python39\\site-packages (from explainerdashboard) (1.20.3)\n",
      "Requirement already satisfied: pandas>=1.1 in c:\\users\\marios tirovolas\\appdata\\roaming\\python\\python39\\site-packages (from explainerdashboard) (1.3.3)\n",
      "Requirement already satisfied: shap>=0.37 in c:\\programdata\\anaconda3\\lib\\site-packages (from explainerdashboard) (0.39.0)\n",
      "Requirement already satisfied: waitress in c:\\programdata\\anaconda3\\lib\\site-packages (from explainerdashboard) (2.1.2)\n",
      "Requirement already satisfied: dash-auth in c:\\programdata\\anaconda3\\lib\\site-packages (from explainerdashboard) (1.4.1)\n",
      "Requirement already satisfied: graphviz>=0.18.2 in c:\\programdata\\anaconda3\\lib\\site-packages (from explainerdashboard) (0.20.1)\n",
      "Requirement already satisfied: dash-core-components==2.0.0 in c:\\users\\marios tirovolas\\appdata\\roaming\\python\\python39\\site-packages (from dash>=2.3.1->explainerdashboard) (2.0.0)\n",
      "Requirement already satisfied: plotly>=5.0.0 in c:\\users\\marios tirovolas\\appdata\\roaming\\python\\python39\\site-packages (from dash>=2.3.1->explainerdashboard) (5.4.0)\n",
      "Requirement already satisfied: dash-table==5.0.0 in c:\\users\\marios tirovolas\\appdata\\roaming\\python\\python39\\site-packages (from dash>=2.3.1->explainerdashboard) (5.0.0)\n",
      "Requirement already satisfied: dash-html-components==2.0.0 in c:\\users\\marios tirovolas\\appdata\\roaming\\python\\python39\\site-packages (from dash>=2.3.1->explainerdashboard) (2.0.0)\n",
      "Requirement already satisfied: flask-compress in c:\\users\\marios tirovolas\\appdata\\roaming\\python\\python39\\site-packages (from dash>=2.3.1->explainerdashboard) (1.13)\n",
      "Requirement already satisfied: Flask>=1.0.4 in c:\\programdata\\anaconda3\\lib\\site-packages (from dash>=2.3.1->explainerdashboard) (1.1.2)\n",
      "Requirement already satisfied: matplotlib in c:\\programdata\\anaconda3\\lib\\site-packages (from dtreeviz>=1.3->explainerdashboard) (3.4.3)\n",
      "Requirement already satisfied: pytest in c:\\programdata\\anaconda3\\lib\\site-packages (from dtreeviz>=1.3->explainerdashboard) (6.2.4)\n",
      "Requirement already satisfied: colour in c:\\programdata\\anaconda3\\lib\\site-packages (from dtreeviz>=1.3->explainerdashboard) (0.1.5)\n",
      "Requirement already satisfied: pytz>=2017.3 in c:\\programdata\\anaconda3\\lib\\site-packages (from pandas>=1.1->explainerdashboard) (2021.3)\n",
      "Requirement already satisfied: python-dateutil>=2.7.3 in c:\\programdata\\anaconda3\\lib\\site-packages (from pandas>=1.1->explainerdashboard) (2.8.2)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from scikit-learn>=1.1->explainerdashboard) (2.2.0)\n",
      "Requirement already satisfied: scipy>=1.3.2 in c:\\users\\marios tirovolas\\appdata\\roaming\\python\\python39\\site-packages (from scikit-learn>=1.1->explainerdashboard) (1.9.3)\n",
      "Requirement already satisfied: numba in c:\\programdata\\anaconda3\\lib\\site-packages (from shap>=0.37->explainerdashboard) (0.54.1)\n",
      "Requirement already satisfied: tqdm>4.25.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from shap>=0.37->explainerdashboard) (4.62.3)\n",
      "Requirement already satisfied: cloudpickle in c:\\programdata\\anaconda3\\lib\\site-packages (from shap>=0.37->explainerdashboard) (2.0.0)\n",
      "Requirement already satisfied: slicer==0.0.7 in c:\\programdata\\anaconda3\\lib\\site-packages (from shap>=0.37->explainerdashboard) (0.0.7)\n",
      "Requirement already satisfied: colorama in c:\\programdata\\anaconda3\\lib\\site-packages (from click->explainerdashboard) (0.4.4)\n",
      "Requirement already satisfied: chart-studio>=1.0.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from dash-auth->explainerdashboard) (1.1.0)\n",
      "Requirement already satisfied: itsdangerous>=1.1.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from dash-auth->explainerdashboard) (2.0.1)\n",
      "Requirement already satisfied: ua-parser in c:\\programdata\\anaconda3\\lib\\site-packages (from dash-auth->explainerdashboard) (0.16.1)\n",
      "Requirement already satisfied: flask-seasurf in c:\\programdata\\anaconda3\\lib\\site-packages (from dash-auth->explainerdashboard) (1.1.1)\n",
      "Requirement already satisfied: requests in c:\\programdata\\anaconda3\\lib\\site-packages (from dash-auth->explainerdashboard) (2.26.0)\n",
      "Requirement already satisfied: retrying in c:\\programdata\\anaconda3\\lib\\site-packages (from dash-auth->explainerdashboard) (1.3.3)\n",
      "Requirement already satisfied: WTForms>=2.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from flask-simplelogin->explainerdashboard) (3.0.1)\n",
      "Requirement already satisfied: Flask-WTF<0.16.0,>=0.15.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from flask-simplelogin->explainerdashboard) (0.15.1)\n",
      "Requirement already satisfied: ipython in c:\\programdata\\anaconda3\\lib\\site-packages (from jupyter-dash->explainerdashboard) (7.29.0)\n",
      "Requirement already satisfied: ansi2html in c:\\programdata\\anaconda3\\lib\\site-packages (from jupyter-dash->explainerdashboard) (1.8.0)\n",
      "Requirement already satisfied: nest-asyncio in c:\\programdata\\anaconda3\\lib\\site-packages (from jupyter-dash->explainerdashboard) (1.5.1)\n",
      "Requirement already satisfied: ipykernel in c:\\programdata\\anaconda3\\lib\\site-packages (from jupyter-dash->explainerdashboard) (6.4.1)\n",
      "Requirement already satisfied: pyyaml in c:\\programdata\\anaconda3\\lib\\site-packages (from oyaml->explainerdashboard) (6.0)\n",
      "Requirement already satisfied: six in c:\\programdata\\anaconda3\\lib\\site-packages (from chart-studio>=1.0.0->dash-auth->explainerdashboard) (1.16.0)\n",
      "Requirement already satisfied: Jinja2>=2.10.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from Flask>=1.0.4->dash>=2.3.1->explainerdashboard) (2.11.3)\n",
      "Requirement already satisfied: Werkzeug>=0.15 in c:\\programdata\\anaconda3\\lib\\site-packages (from Flask>=1.0.4->dash>=2.3.1->explainerdashboard) (2.0.2)\n",
      "Requirement already satisfied: tenacity>=6.2.0 in c:\\users\\marios tirovolas\\appdata\\roaming\\python\\python39\\site-packages (from plotly>=5.0.0->dash>=2.3.1->explainerdashboard) (8.0.1)\n",
      "Requirement already satisfied: MarkupSafe in c:\\programdata\\anaconda3\\lib\\site-packages (from WTForms>=2.1->flask-simplelogin->explainerdashboard) (1.1.1)\n",
      "Requirement already satisfied: brotli in c:\\programdata\\anaconda3\\lib\\site-packages (from flask-compress->dash>=2.3.1->explainerdashboard) (1.0.9)\n",
      "Requirement already satisfied: traitlets<6.0,>=4.1.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from ipykernel->jupyter-dash->explainerdashboard) (5.1.0)\n",
      "Requirement already satisfied: debugpy<2.0,>=1.0.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from ipykernel->jupyter-dash->explainerdashboard) (1.4.1)\n",
      "Requirement already satisfied: ipython-genutils in c:\\programdata\\anaconda3\\lib\\site-packages (from ipykernel->jupyter-dash->explainerdashboard) (0.2.0)\n",
      "Requirement already satisfied: matplotlib-inline<0.2.0,>=0.1.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from ipykernel->jupyter-dash->explainerdashboard) (0.1.2)\n",
      "Requirement already satisfied: jupyter-client<8.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from ipykernel->jupyter-dash->explainerdashboard) (6.1.12)\n",
      "Requirement already satisfied: tornado<7.0,>=4.2 in c:\\programdata\\anaconda3\\lib\\site-packages (from ipykernel->jupyter-dash->explainerdashboard) (6.1)\n",
      "Requirement already satisfied: backcall in c:\\programdata\\anaconda3\\lib\\site-packages (from ipython->jupyter-dash->explainerdashboard) (0.2.0)\n",
      "Requirement already satisfied: pygments in c:\\programdata\\anaconda3\\lib\\site-packages (from ipython->jupyter-dash->explainerdashboard) (2.10.0)\n",
      "Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from ipython->jupyter-dash->explainerdashboard) (3.0.20)\n",
      "Requirement already satisfied: pickleshare in c:\\programdata\\anaconda3\\lib\\site-packages (from ipython->jupyter-dash->explainerdashboard) (0.7.5)\n",
      "Requirement already satisfied: setuptools>=18.5 in c:\\programdata\\anaconda3\\lib\\site-packages (from ipython->jupyter-dash->explainerdashboard) (59.5.0)\n",
      "Requirement already satisfied: jedi>=0.16 in c:\\programdata\\anaconda3\\lib\\site-packages (from ipython->jupyter-dash->explainerdashboard) (0.18.0)\n",
      "Requirement already satisfied: decorator in c:\\programdata\\anaconda3\\lib\\site-packages (from ipython->jupyter-dash->explainerdashboard) (5.1.0)\n",
      "Requirement already satisfied: pyparsing>=2.2.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from matplotlib->dtreeviz>=1.3->explainerdashboard) (3.0.4)\n",
      "Requirement already satisfied: pillow>=6.2.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from matplotlib->dtreeviz>=1.3->explainerdashboard) (8.4.0)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\marios tirovolas\\appdata\\roaming\\python\\python39\\site-packages (from matplotlib->dtreeviz>=1.3->explainerdashboard) (0.11.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in c:\\users\\marios tirovolas\\appdata\\roaming\\python\\python39\\site-packages (from matplotlib->dtreeviz>=1.3->explainerdashboard) (1.3.2)\n",
      "Requirement already satisfied: llvmlite<0.38,>=0.37.0rc1 in c:\\programdata\\anaconda3\\lib\\site-packages (from numba->shap>=0.37->explainerdashboard) (0.37.0)\n",
      "Requirement already satisfied: attrs>=19.2.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from pytest->dtreeviz>=1.3->explainerdashboard) (21.2.0)\n",
      "Requirement already satisfied: iniconfig in c:\\programdata\\anaconda3\\lib\\site-packages (from pytest->dtreeviz>=1.3->explainerdashboard) (1.1.1)\n",
      "Requirement already satisfied: packaging in c:\\programdata\\anaconda3\\lib\\site-packages (from pytest->dtreeviz>=1.3->explainerdashboard) (21.0)\n",
      "Requirement already satisfied: pluggy<1.0.0a1,>=0.12 in c:\\programdata\\anaconda3\\lib\\site-packages (from pytest->dtreeviz>=1.3->explainerdashboard) (0.13.1)\n",
      "Requirement already satisfied: py>=1.8.2 in c:\\programdata\\anaconda3\\lib\\site-packages (from pytest->dtreeviz>=1.3->explainerdashboard) (1.10.0)\n",
      "Requirement already satisfied: toml in c:\\programdata\\anaconda3\\lib\\site-packages (from pytest->dtreeviz>=1.3->explainerdashboard) (0.10.2)\n",
      "Requirement already satisfied: atomicwrites>=1.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from pytest->dtreeviz>=1.3->explainerdashboard) (1.4.0)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from requests->dash-auth->explainerdashboard) (1.26.7)\n",
      "Requirement already satisfied: charset-normalizer~=2.0.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from requests->dash-auth->explainerdashboard) (2.0.4)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\programdata\\anaconda3\\lib\\site-packages (from requests->dash-auth->explainerdashboard) (2021.10.8)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\programdata\\anaconda3\\lib\\site-packages (from requests->dash-auth->explainerdashboard) (3.2)\n",
      "Requirement already satisfied: parso<0.9.0,>=0.8.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from jedi>=0.16->ipython->jupyter-dash->explainerdashboard) (0.8.2)\n",
      "Requirement already satisfied: pyzmq>=13 in c:\\programdata\\anaconda3\\lib\\site-packages (from jupyter-client<8.0->ipykernel->jupyter-dash->explainerdashboard) (22.2.1)\n",
      "Requirement already satisfied: jupyter-core>=4.6.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from jupyter-client<8.0->ipykernel->jupyter-dash->explainerdashboard) (4.8.1)\n",
      "Requirement already satisfied: wcwidth in c:\\programdata\\anaconda3\\lib\\site-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython->jupyter-dash->explainerdashboard) (0.2.5)\n",
      "Requirement already satisfied: pywin32>=1.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from jupyter-core>=4.6.0->jupyter-client<8.0->ipykernel->jupyter-dash->explainerdashboard) (228)\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "sys.path.insert(0, \"..\")\n",
    "\n",
    "from base import *\n",
    "from util import *\n",
    "\n",
    "import pandas as pd\n",
    "pd.options.mode.chained_assignment = None  # default='warn'\n",
    "import re\n",
    "import numpy as np\n",
    "\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "\n",
    "from fitter import Fitter, get_common_distributions, get_distributions\n",
    "from sklearn import preprocessing\n",
    "from sklearn.preprocessing import scale\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.preprocessing import Normalizer\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.datasets import make_friedman3, make_s_curve\n",
    "from sklearn.linear_model import BayesianRidge, ElasticNet\n",
    "from sklearn.model_selection import KFold, train_test_split\n",
    "from sklearn.model_selection import RepeatedKFold\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "\n",
    "!pip install imbalanced-learn\n",
    "!pip install lightgbm\n",
    "!pip install wittgenstein --user\n",
    "!pip install explainerdashboard --user\n",
    "\n",
    "from imblearn.over_sampling import ADASYN\n",
    "from imblearn.combine import SMOTEENN\n",
    "from imblearn.combine import SMOTETomek\n",
    "from sklearn.model_selection import cross_val_predict\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.metrics import cohen_kappa_score\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import plot_confusion_matrix\n",
    "from sklearn.metrics import classification_report\n",
    "\n",
    "# for Box-Cox Transformation\n",
    "from scipy import stats\n",
    "\n",
    "# plotting modules\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.pyplot import figure\n",
    "from plotly.subplots import make_subplots\n",
    "import plotly.graph_objs as go\n",
    "import plotly.express as px\n",
    "\n",
    "from tqdm import tqdm\n",
    "import math\n",
    "\n",
    "from sklearn.datasets import make_blobs\n",
    "from matplotlib import pyplot\n",
    "from pandas import DataFrame\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6b80c1cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Type</th>\n",
       "      <th>Air temperature [K]</th>\n",
       "      <th>Process temperature [K]</th>\n",
       "      <th>Rotational speed [rpm]</th>\n",
       "      <th>Torque [Nm]</th>\n",
       "      <th>Tool wear [min]</th>\n",
       "      <th>Machine failure</th>\n",
       "      <th>TWF</th>\n",
       "      <th>HDF</th>\n",
       "      <th>PWF</th>\n",
       "      <th>OSF</th>\n",
       "      <th>RNF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>298.1</td>\n",
       "      <td>308.6</td>\n",
       "      <td>1551</td>\n",
       "      <td>42.8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>298.2</td>\n",
       "      <td>308.7</td>\n",
       "      <td>1408</td>\n",
       "      <td>46.3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>298.1</td>\n",
       "      <td>308.5</td>\n",
       "      <td>1498</td>\n",
       "      <td>49.4</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>298.2</td>\n",
       "      <td>308.6</td>\n",
       "      <td>1433</td>\n",
       "      <td>39.5</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>298.2</td>\n",
       "      <td>308.7</td>\n",
       "      <td>1408</td>\n",
       "      <td>40.0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Type  Air temperature [K]  Process temperature [K]  Rotational speed [rpm]  \\\n",
       "0     1                298.1                    308.6                    1551   \n",
       "1     0                298.2                    308.7                    1408   \n",
       "2     0                298.1                    308.5                    1498   \n",
       "3     0                298.2                    308.6                    1433   \n",
       "4     0                298.2                    308.7                    1408   \n",
       "\n",
       "   Torque [Nm]  Tool wear [min]  Machine failure  TWF  HDF  PWF  OSF  RNF  \n",
       "0         42.8                0                0    0    0    0    0    0  \n",
       "1         46.3                3                0    0    0    0    0    0  \n",
       "2         49.4                5                0    0    0    0    0    0  \n",
       "3         39.5                7                0    0    0    0    0    0  \n",
       "4         40.0                9                0    0    0    0    0    0  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Collect data from sensors (i.e., time-series data) installed in the manufacturing system \n",
    "ai4i2020_encoded_balanced=pd.read_csv(r'G:\\\\.shortcut-targets-by-id\\\\1-wapAl6N5YrCs68c4NiFKyvybXTXmdgZ\\\\Ph_D_Tyrovolas\\\\Our Papers\\\\3rd_Paper-Proposal\\\\Testbed Codes\\\\AI4I_Case_Study\\\\raw_data\\\\ai4i2020_encoded_balanced.csv')\n",
    "ai4i2020_encoded_balanced.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e7f94ff2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run in local\n",
    "# Fold index\n",
    "fold = 1\n",
    "\n",
    "original_X_train = pd.read_csv('G:\\\\.shortcut-targets-by-id\\\\1-wapAl6N5YrCs68c4NiFKyvybXTXmdgZ\\\\Ph_D_Tyrovolas\\\\Our Papers\\\\3rd_Paper-Proposal\\\\Testbed Codes\\\\AI4I_Case_Study\\\\k-fold cross validation datasets\\\\' + str(fold) + \"\\\\Training Dataset\" + \"\\\\X_train_iter_\" + str(fold) + \".csv\")\n",
    "original_X_test = pd.read_csv('G:\\\\.shortcut-targets-by-id\\\\1-wapAl6N5YrCs68c4NiFKyvybXTXmdgZ\\\\Ph_D_Tyrovolas\\\\Our Papers\\\\3rd_Paper-Proposal\\\\Testbed Codes\\\\AI4I_Case_Study\\\\k-fold cross validation datasets\\\\' + str(fold) + \"\\\\Test Dataset\" + \"\\\\X_test_iter_\" + str(fold) + \".csv\")\n",
    "\n",
    "X_train = pd.read_csv('G:\\\\.shortcut-targets-by-id\\\\1-wapAl6N5YrCs68c4NiFKyvybXTXmdgZ\\\\Ph_D_Tyrovolas\\\\Our Papers\\\\3rd_Paper-Proposal\\\\Testbed Codes\\\\AI4I_Case_Study\\\\k-fold cross validation datasets\\\\' + str(fold) + \"\\\\Training Dataset\" + \"\\\\Scaled_X_train_iter_\" + str(fold) + \".csv\", names=['Type', 'Air temperature [K]', 'Process temperature [K]', 'Rotational speed [rpm]', 'Torque [Nm]', 'Tool wear [min]'])\n",
    "y_train = pd.read_csv('G:\\\\.shortcut-targets-by-id\\\\1-wapAl6N5YrCs68c4NiFKyvybXTXmdgZ\\\\Ph_D_Tyrovolas\\\\Our Papers\\\\3rd_Paper-Proposal\\\\Testbed Codes\\\\AI4I_Case_Study\\\\k-fold cross validation datasets\\\\' + str(fold) + \"\\\\Training Dataset\" + \"\\\\y_train_iter_\" + str(fold) + \".csv\")\n",
    "X_test = pd.read_csv('G:\\\\.shortcut-targets-by-id\\\\1-wapAl6N5YrCs68c4NiFKyvybXTXmdgZ\\\\Ph_D_Tyrovolas\\\\Our Papers\\\\3rd_Paper-Proposal\\\\Testbed Codes\\\\AI4I_Case_Study\\\\k-fold cross validation datasets\\\\' + str(fold) + \"\\\\Test Dataset\" + \"\\\\Scaled_X_test_iter_\" + str(fold) + \".csv\", names=['Type', 'Air temperature [K]', 'Process temperature [K]', 'Rotational speed [rpm]', 'Torque [Nm]', 'Tool wear [min]'])\n",
    "y_test = pd.read_csv('G:\\\\.shortcut-targets-by-id\\\\1-wapAl6N5YrCs68c4NiFKyvybXTXmdgZ\\\\Ph_D_Tyrovolas\\\\Our Papers\\\\3rd_Paper-Proposal\\\\Testbed Codes\\\\AI4I_Case_Study\\\\k-fold cross validation datasets\\\\' + str(fold) + \"\\\\Test Dataset\" + \"\\\\y_test_iter_\" + str(fold) + \".csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "26150ae6",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = X_train.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))\n",
    "X_test = X_test.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c54574dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "acc_list = []\n",
    "auc_list = []\n",
    "kappa_list = []"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d94c03fd",
   "metadata": {},
   "source": [
    "## Training "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93a15f73",
   "metadata": {},
   "source": [
    "### FCMB Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ef4e0974",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-----------------------------------------\n",
      "-----------------------------------------\n",
      "-----------------------------------------\n",
      "-----------------------------------------\n",
      "-----------------------------------------\n",
      "{'act': None, 'activation': 'sigmoid', 'activation_m': 1, 'batch_size': 10, 'buffer_size': 1000, 'depth': 5, 'dropout_p': 0.0, 'epochs': 100, 'init_method': None, 'init_y_method': 'uniform', 'learning_rate': 0.001, 'model_type': 'basic', 'optimizer': 'rmsprop', 'random_state': None, 'training_hook': [], 'training_loss': 'logloss'}\n",
      "-----------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Marios Tirovolas\\Papers_Jupyter_Notebook_Codes\\Data-driven-Causal-Discovery-for-Constructing-Fuzzy-Cognitive-Maps-An-Industrial-Case-Study-main\\fcm_classifier_transformer-main\\base\\classifier.py:143: UserWarning: 2018.12.16 The instruction  'loss = loss/self.batch_size' was commented out. Due to increased gradient values check the optimizer learning rate \n",
      "  warnings.warn('2018.12.16 The instruction  \\'loss = loss/self.batch_size\\' was commented out. Due to increased gradient values check the optimizer learning rate ')\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Learning time 2866.2384073734283 sec\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>FcmBinaryClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">FcmBinaryClassifier</label><div class=\"sk-toggleable__content\"><pre>FcmBinaryClassifier()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "FcmBinaryClassifier()"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Build an FCMB model\n",
    "\n",
    "\n",
    "from sklearn.base import BaseEstimator, ClassifierMixin\n",
    "from base.classifier import BaseFcmClassifier\n",
    "from base.losses import MSE, LogLoss, SoftmaxCrossEntropy\n",
    "from base.model import Model, AdditiveModel, Sigmoid, Tanh, Ident, Relu\n",
    "from base.binary_classifier import FcmBinaryClassifier\n",
    "import tensorflow as tf\n",
    "import sklearn.preprocessing\n",
    "import numpy as np\n",
    "\n",
    "X = X_train.to_numpy()\n",
    "y = y_train.to_numpy()\n",
    "\n",
    "fcmb = FcmBinaryClassifier()\n",
    "\n",
    "fcmb.__init__(act=None, activation='sigmoid', activation_m=1, depth=5, epochs=100, batch_size=10, buffer_size=1000, training_loss='logloss', optimizer='rmsprop', learning_rate=0.001, model_type='basic', init_method = None, init_y_method = 'uniform', dropout_p=0.0, training_hook=[], random_state=None)\n",
    "\n",
    "fcmb.fit(X,y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9ff2229",
   "metadata": {},
   "source": [
    "### FCMMC Classifier "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "dffdecee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-----------------------------------------\n",
      "-----------------------------------------\n",
      "-----------------------------------------\n",
      "-----------------------------------------\n",
      "-----------------------------------------\n",
      "{'act': None, 'activation': 'sigmoid', 'activation_m': 1, 'batch_size': 10, 'buffer_size': 1000, 'depth': 5, 'dropout_p': 0.0, 'epochs': 100, 'init_method': None, 'init_y_method': 'uniform', 'learning_rate': 0.001, 'model_type': 'basic', 'optimizer': 'rmsprop', 'random_state': None, 'training_hook': [], 'training_loss': 'softmax'}\n",
      "-----------------------------------------\n",
      "Learning time 3358.0540685653687 sec\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>FcmMulticlassClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">FcmMulticlassClassifier</label><div class=\"sk-toggleable__content\"><pre>FcmMulticlassClassifier()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "FcmMulticlassClassifier()"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Build an FCMMC model\n",
    "\n",
    "from sklearn.base import BaseEstimator, ClassifierMixin\n",
    "from base.classifier import BaseFcmClassifier\n",
    "from base.losses import MSE, LogLoss, SoftmaxCrossEntropy\n",
    "from base.model import Model, AdditiveModel, Sigmoid, Tanh, Ident, Relu\n",
    "from base.mc_classifier import FcmMulticlassClassifier\n",
    "import tensorflow as tf\n",
    "import sklearn.preprocessing\n",
    "import numpy as np\n",
    "       \n",
    "fcmmc = FcmMulticlassClassifier()\n",
    "fcmmc.fit(X,y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8193e557",
   "metadata": {},
   "source": [
    "### FCMB Classifier "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "75e9b598",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision Score:  0.9203030728216641\n",
      "Recall Score:  0.7957054470459785\n",
      "F1 Score:  0.8534808067664281\n",
      "Accuracy Score:  0.8570703224168571\n"
     ]
    }
   ],
   "source": [
    "#Predict the FCMB response for train dataset\n",
    "y_train_pred_fcmb = fcmb.predict(X_train)\n",
    "\n",
    "#Performance measures for training dataset\n",
    "\n",
    "from sklearn.metrics import precision_score, recall_score,f1_score,accuracy_score\n",
    "print(\"Precision Score: \",precision_score(y_train,y_train_pred_fcmb))\n",
    "print(\"Recall Score: \",recall_score(y_train, y_train_pred_fcmb))\n",
    "print(\"F1 Score: \",f1_score(y_train, y_train_pred_fcmb))\n",
    "print(\"Accuracy Score: \",accuracy_score(y_train, y_train_pred_fcmb))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dbd2b94b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "confusion_matrix(y_train, y_train_pred_fcmb)\n",
    "sns.heatmap(confusion_matrix(y_train, y_train_pred_fcmb), annot=True,fmt='d')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "432d8af7",
   "metadata": {},
   "source": [
    "#### Evaluating on Test set  (FCMB Classifier)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2f47f236",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision Score:  0.9203980099502488\n",
      "Recall Score:  0.8078602620087336\n",
      "F1 Score:  0.8604651162790699\n",
      "Accuracy Score:  0.8629354654483152\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import precision_score, recall_score,f1_score,accuracy_score\n",
    "\n",
    "#Predict the response for test dataset\n",
    "y_test_pred_fcmb = fcmb.predict(X_test)\n",
    "\n",
    "\n",
    "print(\"Precision Score: \",precision_score(y_test, y_test_pred_fcmb))\n",
    "print(\"Recall Score: \",recall_score(y_test, y_test_pred_fcmb))\n",
    "print(\"F1 Score: \",f1_score(y_test, y_test_pred_fcmb))\n",
    "print(\"Accuracy Score: \",accuracy_score(y_test, y_test_pred_fcmb))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "cf3b7be0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "confusion_matrix(y_test, y_test_pred_fcmb)\n",
    "sns.heatmap(confusion_matrix(y_test, y_test_pred_fcmb), annot=True,fmt='d')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0356afdc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8656067777109536\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "#calculate AUC of model\n",
    "auc_fcmb = metrics.roc_auc_score(y_test, y_test_pred_fcmb)\n",
    "print(auc_fcmb)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5dfb0efc",
   "metadata": {},
   "source": [
    "#### FCMB Classifier's Cohen Kappa "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "87413231",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7269026613083509\n"
     ]
    }
   ],
   "source": [
    "cohen_score_fcmb = cohen_kappa_score(y_test, y_test_pred_fcmb)\n",
    "print(cohen_score_fcmb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c1477d18",
   "metadata": {},
   "outputs": [],
   "source": [
    "acc_list.append(accuracy_score(y_test, y_test_pred_fcmb))\n",
    "auc_list.append(auc_fcmb)\n",
    "kappa_list.append(cohen_score_fcmb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e898f45a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Variable 'Variable:0' shape=(7, 7) dtype=float64, numpy=\n",
       "array([[ 2.06949867, -2.42551371,  0.79907924,  3.55436508, -2.35782455,\n",
       "        -2.87695331,  0.52769979],\n",
       "       [-0.93539021,  0.97528025, -0.21578245, -1.48012357, -0.09093064,\n",
       "         1.73774255,  0.51141954],\n",
       "       [-0.96487362, -2.43679354,  0.94498803, -2.47473468, -2.2046347 ,\n",
       "         8.97804473,  0.63014272],\n",
       "       [ 1.23063375, -1.93721858,  0.6439859 ,  2.22006577, -1.63771332,\n",
       "        -2.04830993,  0.11959739],\n",
       "       [ 2.47788723,  1.46213577, -2.59387006,  1.30454694,  2.13070699,\n",
       "         0.28153081, -0.4847886 ],\n",
       "       [-0.96903936,  1.45972413, -0.7304712 , -2.65319783,  1.77851031,\n",
       "         1.2250257 ,  0.347156  ],\n",
       "       [-0.29067869,  2.24552108,  3.92065713, -1.31239654, -0.61645534,\n",
       "         2.42155463, -0.45578515]])>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Binary FCM Classifier Weights\n",
    "fcmb.base_fcm.model.W"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ab13e8a1",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Variable 'Variable:0' shape=(7, 1) dtype=float64, numpy=\n",
       "array([[-0.0558424 ],\n",
       "       [-0.67396447],\n",
       "       [ 0.58668432],\n",
       "       [ 1.24769573],\n",
       "       [-1.19306468],\n",
       "       [-0.93517934],\n",
       "       [ 0.73471209]])>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Binary FCM Classifier bias\n",
    "fcmb.base_fcm.model.b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8dbceff5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([[0.03489692, 0.51641602, 0.6600942 , ..., 0.62967   , 0.86352839,\n",
       "         0.5       ],\n",
       "        [0.03489692, 0.04256139, 0.04288691, ..., 0.01300837, 0.86352839,\n",
       "         0.5       ],\n",
       "        [0.88111716, 0.80309573, 0.75243418, ..., 0.60365046, 0.51043227,\n",
       "         0.5       ],\n",
       "        ...,\n",
       "        [0.03489692, 0.91093581, 0.89522358, ..., 0.60004257, 0.8238796 ,\n",
       "         0.5       ],\n",
       "        [0.03489692, 0.52516814, 0.78478205, ..., 0.45123594, 0.1385033 ,\n",
       "         0.5       ],\n",
       "        [0.88111716, 0.14004244, 0.07461111, ..., 0.23605089, 0.63226586,\n",
       "         0.5       ]]),\n",
       " array([[0.02249105, 0.5934161 , 0.99504785, ..., 0.30954867, 0.57481104,\n",
       "         0.99347497],\n",
       "        [0.6792975 , 0.28918931, 0.9961443 , ..., 0.4200284 , 0.05536897,\n",
       "         0.73712687],\n",
       "        [0.15905508, 0.32667936, 0.69682387, ..., 0.78289304, 0.36089721,\n",
       "         0.99319578],\n",
       "        ...,\n",
       "        [0.01125883, 0.66712014, 0.98732676, ..., 0.27828429, 0.66656196,\n",
       "         0.99888664],\n",
       "        [0.38020336, 0.23600633, 0.23101472, ..., 0.19140597, 0.18190232,\n",
       "         0.97418327],\n",
       "        [0.8328663 , 0.15687825, 0.92662893, ..., 0.87458281, 0.0568311 ,\n",
       "         0.67593398]]),\n",
       " array([[0.07490829, 0.60825009, 0.98682227, ..., 0.05584411, 0.47735311,\n",
       "         0.99759051],\n",
       "        [0.94938286, 0.07933115, 0.09889396, ..., 0.35223763, 0.03295077,\n",
       "         0.95758134],\n",
       "        [0.17762783, 0.34802821, 0.73839195, ..., 0.29585054, 0.40011737,\n",
       "         0.95756552],\n",
       "        ...,\n",
       "        [0.04293644, 0.68357425, 0.99435718, ..., 0.05505863, 0.55913515,\n",
       "         0.99846147],\n",
       "        [0.82718737, 0.18823569, 0.41775194, ..., 0.4459512 , 0.08658188,\n",
       "         0.65299586],\n",
       "        [0.93465585, 0.052898  , 0.0353838 , ..., 0.70056972, 0.04431617,\n",
       "         0.89659401]]),\n",
       " array([[0.24951132, 0.5172548 , 0.97298907, ..., 0.04505018, 0.26296505,\n",
       "         0.99685347],\n",
       "        [0.98521491, 0.0533982 , 0.04226256, ..., 0.88435548, 0.02202322,\n",
       "         0.21816033],\n",
       "        [0.42415069, 0.35019031, 0.90703785, ..., 0.13736358, 0.19866669,\n",
       "         0.97499096],\n",
       "        ...,\n",
       "        [0.1367499 , 0.60443732, 0.98738208, ..., 0.04232877, 0.35482502,\n",
       "         0.99809705],\n",
       "        [0.95619488, 0.06524433, 0.06521719, ..., 0.78742946, 0.03276562,\n",
       "         0.64153929],\n",
       "        [0.96267352, 0.05228277, 0.02243539, ..., 0.94695126, 0.0420973 ,\n",
       "         0.1514916 ]]),\n",
       " array([[0.70668124, 0.2949068 , 0.7664479 , ..., 0.07449318, 0.10177326,\n",
       "         0.99056043],\n",
       "        [0.94215314, 0.03185587, 0.00695563, ..., 0.97730487, 0.03796288,\n",
       "         0.16435265],\n",
       "        [0.88400221, 0.18009672, 0.55837757, ..., 0.14257582, 0.05601675,\n",
       "         0.9730989 ],\n",
       "        ...,\n",
       "        [0.43690506, 0.41593542, 0.90360469, ..., 0.05458503, 0.18046446,\n",
       "         0.99515663],\n",
       "        [0.95429604, 0.04336127, 0.01348853, ..., 0.96091964, 0.04149621,\n",
       "         0.17212563],\n",
       "        [0.91616202, 0.03377534, 0.00749108, ..., 0.97999748, 0.04691987,\n",
       "         0.16479041]]),\n",
       " array([[0.97422127, 0.10053874, 0.24099217, ..., 0.31571016, 0.02368303,\n",
       "         0.91843507],\n",
       "        [0.90849944, 0.03426619, 0.0073822 , ..., 0.98005395, 0.05076873,\n",
       "         0.14877065],\n",
       "        [0.98840706, 0.06452759, 0.11239774, ..., 0.57811556, 0.01589739,\n",
       "         0.73375939],\n",
       "        ...,\n",
       "        [0.89655793, 0.18555249, 0.52154301, ..., 0.13629732, 0.05187961,\n",
       "         0.97620554],\n",
       "        [0.91282654, 0.03434856, 0.00757897, ..., 0.98003349, 0.04908815,\n",
       "         0.1560448 ],\n",
       "        [0.89466793, 0.03663089, 0.00849697, ..., 0.97844457, 0.055439  ,\n",
       "         0.15629824]])]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Binary FCM Classifier inference process for each observation of the training dataset\n",
    "\n",
    "init_y = np.ones((X.shape[0], fcmb.base_fcm.model.dim - X.shape[1])) * .5\n",
    "\n",
    "trj_fcmb = fcmb.base_fcm.model.trajectory(X, init_y)\n",
    "\n",
    "trj_fcmb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "15ff4f3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6, 1751, 7)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We have d arrays where each array(i), for i=0,1,...,d-1 contains the ith state vector for each data observation\n",
    "\n",
    "init_y_test = np.ones((X_test.shape[0], fcmb.base_fcm.model.dim - X_test.shape[1])) * .5\n",
    "\n",
    "trj_fcmb_test = fcmb.base_fcm.model.trajectory(X_test, init_y_test)\n",
    "\n",
    "trj_fcmb_test\n",
    "\n",
    "np.shape(trj_fcmb_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "dd8e1cbd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([[0.03489692, 0.14004244, 0.26256008, ..., 0.70030832, 0.28282248,\n",
       "         0.5       ],\n",
       "        [0.88111716, 0.30642803, 0.34283657, ..., 0.51496324, 0.84752158,\n",
       "         0.5       ],\n",
       "        [0.03489692, 0.16407757, 0.36106921, ..., 0.94439403, 0.22337481,\n",
       "         0.5       ],\n",
       "        ...,\n",
       "        [0.88111716, 0.76087163, 0.73259553, ..., 0.06219359, 0.11142219,\n",
       "         0.5       ],\n",
       "        [0.88111716, 0.91752604, 0.92281651, ..., 0.40776416, 0.30765751,\n",
       "         0.5       ],\n",
       "        [0.03489692, 0.60396651, 0.48248274, ..., 0.20200808, 0.18834115,\n",
       "         0.5       ]]),\n",
       " array([[0.18720242, 0.26819923, 0.58246611, ..., 0.43551129, 0.33276191,\n",
       "         0.7496302 ],\n",
       "        [0.21103989, 0.34951948, 0.99113972, ..., 0.83329651, 0.28624708,\n",
       "         0.95470798],\n",
       "        [0.13891269, 0.24254893, 0.32653126, ..., 0.50845932, 0.40318444,\n",
       "         0.77418043],\n",
       "        ...,\n",
       "        [0.96483581, 0.0808238 , 0.03957246, ..., 0.71328939, 0.01962344,\n",
       "         0.96330737],\n",
       "        [0.55800567, 0.19827615, 0.20315203, ..., 0.71064481, 0.1337675 ,\n",
       "         0.99435244],\n",
       "        [0.68008553, 0.1921519 , 0.17643995, ..., 0.35282418, 0.07806199,\n",
       "         0.91997431]]),\n",
       " array([[0.42883443, 0.27278077, 0.75952099, ..., 0.25311692, 0.19094108,\n",
       "         0.93404632],\n",
       "        [0.28552137, 0.27356197, 0.55692563, ..., 0.21913546, 0.30143142,\n",
       "         0.98234752],\n",
       "        [0.24915673, 0.33440294, 0.83919404, ..., 0.37988392, 0.29643095,\n",
       "         0.85771772],\n",
       "        ...,\n",
       "        [0.96730945, 0.0504258 , 0.01599644, ..., 0.95247247, 0.04117525,\n",
       "         0.14505393],\n",
       "        [0.75134904, 0.13549098, 0.10659336, ..., 0.80042608, 0.1389023 ,\n",
       "         0.46880205],\n",
       "        [0.93599659, 0.09775895, 0.09388473, ..., 0.75843022, 0.05041067,\n",
       "         0.42690788]]),\n",
       " array([[0.86851479, 0.1639209 , 0.47360121, ..., 0.22610589, 0.06361537,\n",
       "         0.93963049],\n",
       "        [0.69265003, 0.25667738, 0.771529  , ..., 0.21901446, 0.11827511,\n",
       "         0.91753347],\n",
       "        [0.57334493, 0.25337335, 0.72210545, ..., 0.16300829, 0.14334219,\n",
       "         0.97446302],\n",
       "        ...,\n",
       "        [0.91674664, 0.03327838, 0.00720515, ..., 0.98085455, 0.04668191,\n",
       "         0.15961869],\n",
       "        [0.8221764 , 0.07367704, 0.04522399, ..., 0.93344259, 0.08407706,\n",
       "         0.33812126],\n",
       "        [0.94105053, 0.04332851, 0.0149848 , ..., 0.95871447, 0.04140315,\n",
       "         0.23268535]]),\n",
       " array([[0.98395601, 0.06568387, 0.09915207, ..., 0.65866648, 0.01980526,\n",
       "         0.65559239],\n",
       "        [0.96269124, 0.09718291, 0.2250425 , ..., 0.36872225, 0.02942033,\n",
       "         0.91308612],\n",
       "        [0.94569379, 0.12489989, 0.34681912, ..., 0.28393844, 0.03748669,\n",
       "         0.91135606],\n",
       "        ...,\n",
       "        [0.89462819, 0.03646494, 0.00843049, ..., 0.9785763 , 0.05529605,\n",
       "         0.15607522],\n",
       "        [0.85105407, 0.05226336, 0.017549  , ..., 0.96394086, 0.07451173,\n",
       "         0.21471969],\n",
       "        [0.91128774, 0.03624597, 0.00818615, ..., 0.97836377, 0.05154525,\n",
       "         0.15531222]]),\n",
       " array([[0.97265426, 0.04021947, 0.01503854, ..., 0.94959215, 0.02913851,\n",
       "         0.19149403],\n",
       "        [0.98613077, 0.05015957, 0.04007209, ..., 0.86219684, 0.02009999,\n",
       "         0.31954341],\n",
       "        [0.9876501 , 0.05307742, 0.0564122 , ..., 0.78904092, 0.01762585,\n",
       "         0.47027428],\n",
       "        ...,\n",
       "        [0.88232948, 0.03855469, 0.00958942, ..., 0.97700138, 0.05896344,\n",
       "         0.16426423],\n",
       "        [0.85755597, 0.04511987, 0.01328151, ..., 0.97198232, 0.06833336,\n",
       "         0.18632684],\n",
       "        [0.89026329, 0.03722794, 0.00892502, ..., 0.97815382, 0.05645178,\n",
       "         0.16057754]])]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trj_fcmb_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "dc50efeb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.92403955, 0.0338327 , 0.00712342, 0.91429128, 0.97967723,\n",
       "       0.04680631, 0.14621096])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#The last array contains the state vector in the last cycle for each data instance\n",
    "#Remember that the defined threshold is 0.5\n",
    "\n",
    "trj_fcmb_test[5][11]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "54181850",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test_pred_fcmb[11]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "abc54e79",
   "metadata": {},
   "outputs": [],
   "source": [
    "local_feature_importance_fcmb = pd.DataFrame(trj_fcmb_test[5], columns=['Type', 'Air temperature [K]', 'Process temperature [K]', 'Rotational speed [rpm]', 'Torque [Nm]', 'Tool wear [min]', 'Machine failure'])\n",
    "local_feature_importance_fcmb.drop('Machine failure', inplace=True, axis=1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e42d94b1",
   "metadata": {},
   "source": [
    "### FCMMC Classifier "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f7ebd902",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision Score:  0.8832199546485261\n",
      "Recall Score:  0.9450442799951474\n",
      "F1 Score:  0.9130867959913262\n",
      "Accuracy Score:  0.9058771261741558\n"
     ]
    }
   ],
   "source": [
    "#Predict the FCMB response for train dataset\n",
    "y_train_pred_fcmmc = fcmmc.predict(X_train)\n",
    "\n",
    "#Performance measures for training dataset\n",
    "\n",
    "from sklearn.metrics import precision_score, recall_score,f1_score,accuracy_score\n",
    "print(\"Precision Score: \",precision_score(y_train,y_train_pred_fcmmc))\n",
    "print(\"Recall Score: \",recall_score(y_train, y_train_pred_fcmmc))\n",
    "print(\"F1 Score: \",f1_score(y_train, y_train_pred_fcmmc))\n",
    "print(\"Accuracy Score: \",accuracy_score(y_train, y_train_pred_fcmmc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "3254de22",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "confusion_matrix(y_train, y_train_pred_fcmmc)\n",
    "sns.heatmap(confusion_matrix(y_train, y_train_pred_fcmmc), annot=True,fmt='d')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "897248f5",
   "metadata": {},
   "source": [
    "#### Evaluating on Test set  (FCMMC Classifier)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b6ed6f31",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision Score:  0.8815653964984552\n",
      "Recall Score:  0.9344978165938864\n",
      "F1 Score:  0.9072602013778485\n",
      "Accuracy Score:  0.9000571102227298\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import precision_score, recall_score,f1_score,accuracy_score\n",
    "\n",
    "#Predict the response for test dataset\n",
    "y_test_pred_fcmmc = fcmmc.predict(X_test)\n",
    "\n",
    "\n",
    "print(\"Precision Score: \",precision_score(y_test, y_test_pred_fcmmc))\n",
    "print(\"Recall Score: \",recall_score(y_test, y_test_pred_fcmmc))\n",
    "print(\"F1 Score: \",f1_score(y_test, y_test_pred_fcmmc))\n",
    "print(\"Accuracy Score: \",accuracy_score(y_test, y_test_pred_fcmmc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d00cf66d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "confusion_matrix(y_test, y_test_pred_fcmmc)\n",
    "sns.heatmap(confusion_matrix(y_test, y_test_pred_fcmmc), annot=True,fmt='d')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "27b3da88",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8983866328478414\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "#calculate AUC of model\n",
    "auc_fcmmc = metrics.roc_auc_score(y_test, y_test_pred_fcmmc)\n",
    "print(auc_fcmmc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "97477ab7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7991004841781593\n"
     ]
    }
   ],
   "source": [
    "cohen_score_fcmmc = cohen_kappa_score(y_test, y_test_pred_fcmmc)\n",
    "print(cohen_score_fcmmc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "58f2cef4",
   "metadata": {},
   "outputs": [],
   "source": [
    "acc_list.append(accuracy_score(y_test, y_test_pred_fcmmc))\n",
    "auc_list.append(auc_fcmmc)\n",
    "kappa_list.append(cohen_score_fcmmc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "22403488",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Variable 'Variable:0' shape=(8, 8) dtype=float64, numpy=\n",
       "array([[  0.88680359,   1.47639426,  -4.18106782,  -2.14637137,\n",
       "          3.5805547 ,  -0.90672159,   0.96104728,   0.04827183],\n",
       "       [  0.8332049 ,   0.05023765,   1.53855985,  -1.19627539,\n",
       "          1.44708523,  -2.20489013,   0.41320756,   0.54997039],\n",
       "       [  2.87870062,  -1.42342712,   1.90781658,   3.24853659,\n",
       "          4.05730113,   2.01098237,  -3.27938064,   0.52318257],\n",
       "       [ -0.091485  ,   4.20195277,  -2.90569838,  -4.69719085,\n",
       "          3.89811776,  -0.78823214,   0.49308063,   0.31063452],\n",
       "       [  2.96269605,  -1.8173933 ,  -1.1459822 ,   6.61472166,\n",
       "         -0.34939346,  -4.48909742,  -0.13352694,  -0.68874095],\n",
       "       [ -1.69506844,   1.55805259,   1.22266   ,  -3.42345378,\n",
       "          0.99373968,  -0.43812366,  -1.15931551,   1.37165479],\n",
       "       [  2.17568804,   1.53904177,  -1.77729816,   4.74878876,\n",
       "        -14.27358789,   2.12716884,  -2.53723092,   0.85870633],\n",
       "       [  2.98012892,  -3.66525868,   4.76510809,  -5.57967689,\n",
       "         13.70649629,  -6.45050617,   1.96779262,  -0.341542  ]])>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# MultiClass FCM Classifier Weights\n",
    "fcmmc.base_fcm.model.W"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "b8fe1aa2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Variable 'Variable:0' shape=(8, 1) dtype=float64, numpy=\n",
       "array([[ 2.54247879],\n",
       "       [ 1.4319676 ],\n",
       "       [-2.76455759],\n",
       "       [-0.97513201],\n",
       "       [ 1.34282846],\n",
       "       [ 0.8788634 ],\n",
       "       [-2.26611607],\n",
       "       [ 1.80442986]])>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# MultiClass FCM Classifier bias\n",
    "fcmmc.base_fcm.model.b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "5c8ae107",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([[0.03489692, 0.51641602, 0.6600942 , ..., 0.86352839, 0.5       ,\n",
       "         0.5       ],\n",
       "        [0.03489692, 0.04256139, 0.04288691, ..., 0.86352839, 0.5       ,\n",
       "         0.5       ],\n",
       "        [0.88111716, 0.80309573, 0.75243418, ..., 0.51043227, 0.5       ,\n",
       "         0.5       ],\n",
       "        ...,\n",
       "        [0.03489692, 0.91093581, 0.89522358, ..., 0.8238796 , 0.5       ,\n",
       "         0.5       ],\n",
       "        [0.03489692, 0.52516814, 0.78478205, ..., 0.1385033 , 0.5       ,\n",
       "         0.5       ],\n",
       "        [0.88111716, 0.14004244, 0.07461111, ..., 0.63226586, 0.5       ,\n",
       "         0.5       ]]),\n",
       " array([[7.96182970e-01, 7.51573820e-01, 7.88694460e-01, ...,\n",
       "         7.65852475e-01, 7.24235972e-05, 9.91353097e-01],\n",
       "        [3.96249786e-01, 1.72123174e-01, 6.26403947e-01, ...,\n",
       "         3.75376058e-02, 9.45818061e-01, 1.66303275e-04],\n",
       "        [9.19661377e-01, 9.39528391e-01, 9.31751308e-01, ...,\n",
       "         6.30792653e-01, 3.60245183e-04, 9.99838587e-01],\n",
       "        ...,\n",
       "        [7.23777857e-01, 8.28205638e-01, 7.10134510e-01, ...,\n",
       "         8.99263140e-01, 1.04825809e-04, 9.88474771e-01],\n",
       "        [6.10893640e-01, 9.17184891e-01, 4.99666349e-01, ...,\n",
       "         6.94014877e-01, 4.08116453e-04, 9.98404458e-01],\n",
       "        [8.63718888e-01, 5.73989827e-01, 9.28330979e-01, ...,\n",
       "         3.32076000e-02, 5.04480388e-01, 3.67421182e-01]]),\n",
       " array([[3.28163964e-01, 7.90639177e-01, 9.46430299e-01, ...,\n",
       "         7.28218185e-01, 9.11385150e-01, 1.13736087e-01],\n",
       "        [9.87035288e-01, 9.80692439e-01, 4.24348636e-01, ...,\n",
       "         6.39951269e-01, 7.21922231e-09, 9.99999997e-01],\n",
       "        [5.90583172e-01, 9.12424831e-01, 9.97280393e-01, ...,\n",
       "         6.97706101e-01, 3.24422924e-02, 9.87960416e-01],\n",
       "        ...,\n",
       "        [2.49111997e-01, 6.25198120e-01, 9.67551017e-01, ...,\n",
       "         5.41777592e-01, 9.86640254e-01, 3.79084403e-03],\n",
       "        [9.78679776e-01, 9.06113412e-01, 9.75294796e-01, ...,\n",
       "         9.42699055e-01, 9.51489655e-05, 9.99420689e-01],\n",
       "        [9.77249797e-01, 9.92307962e-01, 9.46187834e-01, ...,\n",
       "         8.54621856e-01, 6.03399059e-08, 9.99999999e-01]]),\n",
       " array([[6.71839429e-01, 8.69319969e-01, 1.67447869e-01, ...,\n",
       "         7.39997616e-01, 7.02551456e-04, 9.91762504e-01],\n",
       "        [9.17022888e-01, 8.11923685e-01, 9.97216479e-01, ...,\n",
       "         4.02162248e-01, 1.03764676e-01, 8.44898640e-01],\n",
       "        [8.36719170e-01, 9.50157594e-01, 9.91037660e-01, ...,\n",
       "         9.59679925e-01, 4.23864948e-05, 9.99929318e-01],\n",
       "        ...,\n",
       "        [7.94937732e-01, 9.29163171e-01, 1.74088652e-01, ...,\n",
       "         7.56153389e-01, 1.05609063e-05, 9.99933846e-01],\n",
       "        [7.64184224e-02, 6.68099686e-01, 9.97211559e-01, ...,\n",
       "         2.80606004e-01, 9.96458684e-01, 4.25968695e-03],\n",
       "        [5.14351084e-01, 8.54099010e-01, 9.99569653e-01, ...,\n",
       "         4.89800138e-01, 4.60749007e-02, 9.53766063e-01]]),\n",
       " array([[8.44415484e-01, 5.47145970e-01, 7.92325461e-01, ...,\n",
       "         5.70212024e-01, 9.82504652e-01, 1.56977729e-03],\n",
       "        [9.05794256e-01, 9.78447922e-01, 9.97968232e-01, ...,\n",
       "         8.57014751e-01, 7.24347256e-06, 9.99999266e-01],\n",
       "        [8.83658222e-02, 6.77783443e-01, 9.92762275e-01, ...,\n",
       "         4.76949775e-01, 9.91899519e-01, 4.78404540e-03],\n",
       "        ...,\n",
       "        [8.46659582e-01, 5.46666065e-01, 8.84318221e-01, ...,\n",
       "         4.69608985e-01, 9.90174232e-01, 1.27268183e-03],\n",
       "        [9.47619872e-01, 9.75318233e-01, 2.56023299e-01, ...,\n",
       "         8.93721852e-01, 1.12230427e-08, 9.99999931e-01],\n",
       "        [9.01281094e-01, 9.72880184e-01, 9.84698970e-01, ...,\n",
       "         9.74885789e-01, 3.27993122e-06, 9.99997108e-01]]),\n",
       " array([[8.67673431e-01, 9.16483622e-01, 7.32728824e-01, ...,\n",
       "         2.27794957e-01, 1.71080109e-04, 9.99896593e-01],\n",
       "        [5.83465116e-01, 8.89281928e-01, 9.99232759e-01, ...,\n",
       "         7.02207620e-01, 7.84614101e-03, 9.91737056e-01],\n",
       "        [8.69194420e-01, 9.47600031e-01, 1.69979958e-01, ...,\n",
       "         8.55845348e-01, 5.50653271e-07, 9.99993298e-01],\n",
       "        ...,\n",
       "        [9.10751202e-01, 9.55587010e-01, 8.31071835e-01, ...,\n",
       "         3.14394479e-01, 7.24977963e-06, 9.99997696e-01],\n",
       "        [6.73649633e-01, 4.33663979e-01, 9.82335147e-01, ...,\n",
       "         1.88343999e-01, 9.98767800e-01, 1.65251759e-04],\n",
       "        [8.32136616e-02, 6.58500671e-01, 9.95613265e-01, ...,\n",
       "         3.80377668e-01, 9.95277702e-01, 3.13559943e-03]])]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# MultiClass FCM Classifier inference process for each observation of the training dataset\n",
    "\n",
    "init_y = np.ones((X.shape[0], fcmmc.base_fcm.model.dim - X.shape[1])) * .5\n",
    "\n",
    "trj_fcmmc = fcmmc.base_fcm.model.trajectory(X, init_y)\n",
    "\n",
    "trj_fcmmc\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "44476085",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(15756, 2)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "init_y = np.ones((X.shape[0], fcmmc.base_fcm.model.dim - X.shape[1])) * .5\n",
    "\n",
    "np.shape(init_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "6e705f3f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6, 1751, 8)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We have d arrays where each array(i), for i=0,1,...,d contains the ith state vector for each data observation\n",
    "\n",
    "init_y_test = np.ones((X_test.shape[0], fcmmc.base_fcm.model.dim - X_test.shape[1])) * .5\n",
    "\n",
    "trj_fcmmc_test = fcmmc.base_fcm.model.trajectory(X_test, init_y_test)\n",
    "\n",
    "trj_fcmmc_test\n",
    "\n",
    "np.shape(trj_fcmmc_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "b53f5973",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([[0.03489692, 0.14004244, 0.26256008, ..., 0.28282248, 0.5       ,\n",
       "         0.5       ],\n",
       "        [0.88111716, 0.30642803, 0.34283657, ..., 0.84752158, 0.5       ,\n",
       "         0.5       ],\n",
       "        [0.03489692, 0.16407757, 0.36106921, ..., 0.22337481, 0.5       ,\n",
       "         0.5       ],\n",
       "        ...,\n",
       "        [0.88111716, 0.76087163, 0.73259553, ..., 0.11142219, 0.5       ,\n",
       "         0.5       ],\n",
       "        [0.88111716, 0.91752604, 0.92281651, ..., 0.30765751, 0.5       ,\n",
       "         0.5       ],\n",
       "        [0.03489692, 0.60396651, 0.48248274, ..., 0.18834115, 0.5       ,\n",
       "         0.5       ]]),\n",
       " array([[9.57919156e-01, 8.56970762e-01, 5.98658523e-01, ...,\n",
       "         5.59829425e-01, 1.14643178e-05, 9.99819663e-01],\n",
       "        [9.34318430e-01, 7.57513987e-01, 9.55537297e-01, ...,\n",
       "         2.32137656e-01, 3.42005278e-03, 9.92225595e-01],\n",
       "        [9.74906577e-01, 9.18188673e-01, 8.09995424e-01, ...,\n",
       "         6.54751250e-01, 2.80310864e-07, 9.99996909e-01],\n",
       "        ...,\n",
       "        [3.52576386e-01, 8.78340996e-01, 8.68843194e-01, ...,\n",
       "         9.17128790e-02, 9.01715276e-01, 5.18173658e-01],\n",
       "        [6.84869787e-01, 9.44799985e-01, 9.22904272e-01, ...,\n",
       "         4.64689976e-01, 1.25960418e-02, 9.97945671e-01],\n",
       "        [5.37490630e-01, 7.42423617e-01, 3.83230297e-01, ...,\n",
       "         2.92490936e-01, 1.37458439e-01, 2.76725938e-01]]),\n",
       " array([[9.52253135e-01, 9.31762510e-01, 9.94598566e-01, ...,\n",
       "         8.01409337e-01, 9.45758247e-04, 9.99583229e-01],\n",
       "        [8.24423122e-01, 9.79563520e-01, 9.87815974e-01, ...,\n",
       "         9.02145747e-01, 4.85001079e-04, 9.99986284e-01],\n",
       "        [8.54861689e-01, 9.26959065e-01, 9.98426176e-01, ...,\n",
       "         7.38973862e-01, 1.80669737e-03, 9.99212546e-01],\n",
       "        ...,\n",
       "        [9.87657250e-01, 9.88960742e-01, 4.35986268e-01, ...,\n",
       "         9.42386908e-01, 1.45092577e-08, 9.99999983e-01],\n",
       "        [9.37194481e-01, 9.73233407e-01, 9.93262069e-01, ...,\n",
       "         9.59822187e-01, 6.64487851e-06, 9.99996411e-01],\n",
       "        [9.95102020e-01, 9.49898928e-01, 9.09386239e-01, ...,\n",
       "         8.84901467e-01, 5.63664692e-07, 9.99998607e-01]]),\n",
       " array([[4.85116715e-01, 8.84709484e-01, 9.99234655e-01, ...,\n",
       "         5.98062286e-01, 3.00790471e-02, 9.81524220e-01],\n",
       "        [6.23408918e-01, 8.84841833e-01, 9.98539159e-01, ...,\n",
       "         8.02382071e-01, 4.76509798e-03, 9.91492012e-01],\n",
       "        [7.13215506e-01, 9.31269660e-01, 9.98226223e-01, ...,\n",
       "         8.41385231e-01, 1.07395548e-03, 9.99319708e-01],\n",
       "        ...,\n",
       "        [5.29079383e-01, 4.91106840e-01, 9.94250705e-01, ...,\n",
       "         1.83244091e-01, 9.96862012e-01, 6.23430515e-04],\n",
       "        [1.16447258e-01, 7.05423048e-01, 9.97608227e-01, ...,\n",
       "         3.81164996e-01, 9.79434691e-01, 1.66401894e-02],\n",
       "        [2.02391076e-01, 7.35341052e-01, 9.98606281e-01, ...,\n",
       "         3.03962312e-01, 9.42552946e-01, 6.23935842e-02]]),\n",
       " array([[8.60413326e-01, 9.60884612e-01, 9.82705732e-01, ...,\n",
       "         9.74695150e-01, 1.38330718e-05, 9.99977184e-01],\n",
       "        [3.70460278e-01, 8.67034584e-01, 9.72536768e-01, ...,\n",
       "         8.95115432e-01, 1.04284679e-01, 8.33235223e-01],\n",
       "        [4.16151122e-01, 8.66149120e-01, 9.89309908e-01, ...,\n",
       "         8.57425740e-01, 7.61196293e-02, 8.83142291e-01],\n",
       "        ...,\n",
       "        [9.60827623e-01, 9.86179738e-01, 6.33800123e-01, ...,\n",
       "         7.39109010e-01, 1.27077095e-08, 9.99999996e-01],\n",
       "        [9.31498548e-01, 9.67082250e-01, 2.68110522e-01, ...,\n",
       "         8.82830824e-01, 4.79530829e-08, 9.99999622e-01],\n",
       "        [9.56975061e-01, 9.77487803e-01, 4.00515031e-01, ...,\n",
       "         8.95200441e-01, 1.49511429e-08, 9.99999942e-01]]),\n",
       " array([[7.92660708e-02, 6.51837571e-01, 9.94085586e-01, ...,\n",
       "         4.13698196e-01, 9.95510814e-01, 2.56491830e-03],\n",
       "        [2.26963467e-01, 7.65527132e-01, 7.93605022e-01, ...,\n",
       "         9.08130678e-01, 4.40252249e-01, 1.22356497e-01],\n",
       "        [2.67425979e-01, 8.08836119e-01, 8.61582356e-01, ...,\n",
       "         9.17974562e-01, 2.50959570e-01, 3.40040746e-01],\n",
       "        ...,\n",
       "        [6.31803830e-01, 7.66656560e-01, 9.95391887e-01, ...,\n",
       "         4.09890853e-01, 7.62127733e-01, 1.92987906e-01],\n",
       "        [6.58876694e-01, 4.42660411e-01, 9.79282615e-01, ...,\n",
       "         2.03916804e-01, 9.98757769e-01, 1.74130783e-04],\n",
       "        [5.28173354e-01, 4.86336218e-01, 9.88215969e-01, ...,\n",
       "         2.03218567e-01, 9.98426833e-01, 3.29377442e-04]])]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trj_fcmmc_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "81db5738",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.08955394, 0.66868137, 0.99700564, 0.00816654, 0.85935631,\n",
       "       0.34427815, 0.9941139 , 0.00455398])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#The last array contains the last cycle's state/activation vector for each data instance\n",
    "#Remember that the label is predicted based on the maximum output value value.\n",
    "\n",
    "trj_fcmmc_test[5][162]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "505a98d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test_pred_fcmmc[162]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "42f9927a",
   "metadata": {},
   "outputs": [],
   "source": [
    "local_feature_importance_fcmmc = pd.DataFrame(trj_fcmmc_test[5], columns=['Type', 'Air temperature [K]', 'Process temperature [K]', 'Rotational speed [rpm]', 'Torque [Nm]', 'Tool wear [min]', '0', '1'])\n",
    "local_feature_importance_fcmmc.drop('0', inplace=True, axis=1)\n",
    "local_feature_importance_fcmmc.drop('1', inplace=True, axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3951b43",
   "metadata": {},
   "source": [
    "## Local Explanations for both models"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bbaca05",
   "metadata": {},
   "source": [
    "### FCMB Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "722b4e22",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Number of true positive predictions: 740'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Number of TWF failures: 9'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Number of HDF failures: 244'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Number of PWF failures: 69'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Number of OSF failures: 249'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Number of RNF failures: 178'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Find the observations' indexes that the model correctly predicted as faulty\n",
    "#y: Expected values of the model's output\n",
    "y=y_test;\n",
    "true_positive_indexes = []\n",
    "i=1;\n",
    "\n",
    "#According to the chosen model\n",
    "#For example, y_test_pred_lgbmc for LGBM Classifier\n",
    "for k in range(0,len(y)):\n",
    "    if (y.loc[k,'Machine failure']==int(y_test_pred_fcmb[k])) and (y.loc[k,'Machine failure']==1):\n",
    "        true_positive_indexes.append(k)\n",
    "        i=i+1;\n",
    "\n",
    "        \n",
    "#Find the observations that the selected model correctly predicted as faulty based on the previous indexes\n",
    "true_positive_observations = pd.DataFrame()\n",
    "for k in range(0,len(true_positive_indexes)):\n",
    "    new_row = pd.concat([original_X_test.loc[true_positive_indexes[k],:],y.loc[true_positive_indexes[k],:]], axis=0)\n",
    "    true_positive_observations = true_positive_observations.append(new_row, ignore_index=True)\n",
    "\n",
    "    \n",
    "#Find the observations that the selected model correctly predicted correctly as faulty along with the failure modes\n",
    "\n",
    "true_positive_observations_with_failure_modes = pd.DataFrame()\n",
    "#for index1 in range(0,len(true_positive_observations)):\n",
    "    #for index2 in range (0,len(ai4i2020_encoded_balanced)):\n",
    "        #if true_positive_observations.loc[index1,:].equals(ai4i2020_encoded_balanced.loc[index2,\"Type\":\"Machine failure\"]) == True:\n",
    "            #print(index1)\n",
    "            #true_positive_observations_with_failure_modes = true_positive_observations_with_failure_modes.append(ai4i2020_encoded_balanced.loc[index2,:], ignore_index=True)\n",
    "true_positive_observations_with_failure_modes = ai4i2020_encoded_balanced.join(true_positive_observations.set_index(['Type', 'Air temperature [K]', 'Process temperature [K]', 'Rotational speed [rpm]', 'Torque [Nm]', 'Tool wear [min]','Machine failure']), ['Type', 'Air temperature [K]', 'Process temperature [K]', 'Rotational speed [rpm]', 'Torque [Nm]', 'Tool wear [min]','Machine failure'], how='right')       \n",
    "final_true_positive_observations_with_failure_modes = true_positive_observations_with_failure_modes.reset_index(drop=True)\n",
    "\n",
    "display(\"Number of true positive predictions: \" + str(len(final_true_positive_observations_with_failure_modes)))\n",
    "\n",
    "number_of_TWF_failures_in_true_positive_predictions = 0\n",
    "number_of_HDF_failures_in_true_positive_predictions = 0\n",
    "number_of_PWF_failures_in_true_positive_predictions = 0\n",
    "number_of_OSF_failures_in_true_positive_predictions = 0\n",
    "number_of_random_failures_in_true_positive_predictions=0\n",
    "\n",
    "for k in range(0,len(final_true_positive_observations_with_failure_modes)):\n",
    "    if final_true_positive_observations_with_failure_modes.loc[k,\"TWF\"]==1: #if the failure mode is TWF\n",
    "        number_of_TWF_failures_in_true_positive_predictions = number_of_TWF_failures_in_true_positive_predictions + 1;\n",
    "    if final_true_positive_observations_with_failure_modes.loc[k,\"HDF\"]==1: #if the failure mode is HDF\n",
    "        number_of_HDF_failures_in_true_positive_predictions = number_of_HDF_failures_in_true_positive_predictions + 1;\n",
    "    if final_true_positive_observations_with_failure_modes.loc[k,\"PWF\"]==1: #if the failure mode is PWF\n",
    "        number_of_PWF_failures_in_true_positive_predictions = number_of_PWF_failures_in_true_positive_predictions + 1;\n",
    "    if final_true_positive_observations_with_failure_modes.loc[k,\"OSF\"]==1: #if the failure mode is OSF\n",
    "        number_of_OSF_failures_in_true_positive_predictions = number_of_OSF_failures_in_true_positive_predictions + 1;\n",
    "    if (final_true_positive_observations_with_failure_modes.loc[k,\"Machine failure\"]==1) and (final_true_positive_observations_with_failure_modes.loc[k,\"TWF\"]==0) and (final_true_positive_observations_with_failure_modes.loc[k,\"HDF\"]==0) and (final_true_positive_observations_with_failure_modes.loc[k,\"PWF\"]==0) and (final_true_positive_observations_with_failure_modes.loc[k,\"OSF\"]==0) and (final_true_positive_observations_with_failure_modes.loc[k,\"RNF\"]==0):\n",
    "        number_of_random_failures_in_true_positive_predictions = number_of_random_failures_in_true_positive_predictions+1;\n",
    "\n",
    "display(\"Number of TWF failures: \" + str(number_of_TWF_failures_in_true_positive_predictions))\n",
    "display(\"Number of HDF failures: \" + str(number_of_HDF_failures_in_true_positive_predictions))\n",
    "display(\"Number of PWF failures: \" + str(number_of_PWF_failures_in_true_positive_predictions))\n",
    "display(\"Number of OSF failures: \" + str(number_of_OSF_failures_in_true_positive_predictions))\n",
    "display(\"Number of RNF failures: \" + str(number_of_random_failures_in_true_positive_predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "2893b4e2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4eecdb734c534e14a6beb7458d26139a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Text(value='')"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d065fd339ac04a9cba26330a50183057",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Output()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Interacitve Widget in order to see each true positive observation along with the failure modes\n",
    "\n",
    "from IPython.display import display\n",
    "from IPython.display import clear_output\n",
    "from ipywidgets import Output\n",
    "from ipywidgets import widgets\n",
    "\n",
    "\n",
    "text = widgets.Text()\n",
    "display(text)\n",
    "\n",
    "out = widgets.Output()\n",
    "display(out)\n",
    "\n",
    "def handle_submit(sender):\n",
    "    with out:\n",
    "        clear_output()\n",
    "        index = int(text.value)\n",
    "        print(final_true_positive_observations_with_failure_modes.loc[index,:])\n",
    "        print('\\n')\n",
    "        print(\"Dataset index for the above true positive observation (starting from 0 index): \" + str(true_positive_indexes[index]))\n",
    "        \n",
    "text.on_submit(handle_submit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "9363d3de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TWF: 0.0000 success, HDF: 0.2582 success, PWF: 1.0000 success, OSF: 0.0000 success \n",
      "\n",
      "\n",
      "Through the FCMB model, 132 correct explanations are made in the true positive predictions with average success: 0.3145 \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Calculate the correct explanations\n",
    "correct_explanations = 0\n",
    "correct_explanations_TWF = 0\n",
    "correct_explanations_HDF = 0\n",
    "correct_explanations_PWF = 0\n",
    "correct_explanations_OSF = 0\n",
    "\n",
    "for k in range(0,len(true_positive_observations)):\n",
    "    #if the failure mode is TWF\n",
    "    if final_true_positive_observations_with_failure_modes.loc[k,\"TWF\"]==1:\n",
    "        #if tool wear is the most important feature\n",
    "        if local_feature_importance_fcmb.loc[true_positive_indexes[k],\"Tool wear [min]\"] == max(local_feature_importance_fcmb.loc[true_positive_indexes[k],:]):\n",
    "            correct_explanations = correct_explanations+1;\n",
    "            correct_explanations_TWF = correct_explanations_TWF + 1;\n",
    "    \n",
    "    #if the failure mode is HDF\n",
    "    if final_true_positive_observations_with_failure_modes.loc[k,\"HDF\"]==1: \n",
    "        maximum1 = max(local_feature_importance_fcmb.loc[true_positive_indexes[k],:]) \n",
    "        maximum2 = max(local_feature_importance_fcmb.loc[true_positive_indexes[k],:], key = lambda x: min(local_feature_importance_fcmb.loc[true_positive_indexes[k],:])-1 if (x == maximum1) else x)\n",
    "        if (local_feature_importance_fcmb.loc[true_positive_indexes[k],\"Air temperature [K]\"] == maximum1) or (local_feature_importance_fcmb.loc[true_positive_indexes[k],\"Air temperature [K]\"] == maximum2) or (local_feature_importance_fcmb.loc[true_positive_indexes[k],\"Process temperature [K]\"] == maximum1) or (local_feature_importance_fcmb.loc[true_positive_indexes[k],\"Process temperature [K]\"] == maximum2):\n",
    "            correct_explanations = correct_explanations+1;\n",
    "            correct_explanations_HDF = correct_explanations_HDF + 1;\n",
    "            \n",
    "    #if the failure mode is PWF\n",
    "    if final_true_positive_observations_with_failure_modes.loc[k,\"PWF\"]==1: \n",
    "        maximum1 = max(local_feature_importance_fcmb.loc[true_positive_indexes[k],:]) \n",
    "        maximum2 = max(local_feature_importance_fcmb.loc[true_positive_indexes[k],:], key = lambda x: min(local_feature_importance_fcmb.loc[true_positive_indexes[k],:])-1 if (x == maximum1) else x)\n",
    "        if (local_feature_importance_fcmb.loc[true_positive_indexes[k],\"Rotational speed [rpm]\"] == maximum1) or (local_feature_importance_fcmb.loc[true_positive_indexes[k],\"Rotational speed [rpm]\"] == maximum2) or (local_feature_importance_fcmb.loc[true_positive_indexes[k],\"Torque [Nm]\"] == maximum1) or (local_feature_importance_fcmb.loc[true_positive_indexes[k],\"Torque [Nm]\"] == maximum2):\n",
    "            correct_explanations = correct_explanations+1;\n",
    "            correct_explanations_PWF = correct_explanations_PWF + 1;\n",
    "            \n",
    "    #if the failure mode is OSF        \n",
    "    if final_true_positive_observations_with_failure_modes.loc[k,\"OSF\"]==1:\n",
    "        maximum1 = max(local_feature_importance_fcmb.loc[true_positive_indexes[k],:]) \n",
    "        maximum2 = max(local_feature_importance_fcmb.loc[true_positive_indexes[k],:], key = lambda x: min(local_feature_importance_fcmb.loc[true_positive_indexes[k],:])-1 if (x == maximum1) else x)\n",
    "        if (local_feature_importance_fcmb.loc[true_positive_indexes[k],\"Tool wear [min]\"] == maximum1) or (local_feature_importance_fcmb.loc[true_positive_indexes[k],\"Tool wear [min]\"] == maximum2) or (local_feature_importance_fcmb.loc[true_positive_indexes[k],\"Torque [Nm]\"] == maximum1) or (local_feature_importance_fcmb.loc[true_positive_indexes[k],\"Torque [Nm]\"] == maximum2):\n",
    "            correct_explanations = correct_explanations+1;\n",
    "            correct_explanations_OSF = correct_explanations_OSF + 1;\n",
    "\n",
    "print(\"TWF: %.4f success, HDF: %.4f success, PWF: %.4f success, OSF: %.4f success \\n\\n\" % (correct_explanations_TWF/number_of_TWF_failures_in_true_positive_predictions,correct_explanations_HDF/number_of_HDF_failures_in_true_positive_predictions,correct_explanations_PWF/number_of_PWF_failures_in_true_positive_predictions,correct_explanations_OSF/number_of_OSF_failures_in_true_positive_predictions))\n",
    "\n",
    "average_success = ((correct_explanations_TWF/number_of_TWF_failures_in_true_positive_predictions)+(correct_explanations_HDF/number_of_HDF_failures_in_true_positive_predictions)+(correct_explanations_PWF/number_of_PWF_failures_in_true_positive_predictions)+(correct_explanations_OSF/number_of_OSF_failures_in_true_positive_predictions))/4\n",
    "\n",
    "print(\"Through the FCMB model, %d correct explanations are made in the true positive predictions with average success: %.4f \\n\\n\" % (correct_explanations, average_success))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0dba610",
   "metadata": {},
   "source": [
    "### FCMMC Classifier "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "76723914",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Number of true positive predictions: 856'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Number of TWF failures: 51'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Number of HDF failures: 248'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Number of PWF failures: 128'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Number of OSF failures: 249'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Number of RNF failures: 189'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Find the observations' indexes that the model correctly predicted as faulty\n",
    "#y: Expected values of the model's output\n",
    "y=y_test;\n",
    "true_positive_indexes = []\n",
    "i=1;\n",
    "\n",
    "#According to the chosen model\n",
    "#For example, y_test_pred_lgbmc for LGBM Classifier\n",
    "for k in range(0,len(y)):\n",
    "    if (y.loc[k,'Machine failure']==int(y_test_pred_fcmmc[k])) and (y.loc[k,'Machine failure']==1):\n",
    "        true_positive_indexes.append(k)\n",
    "        i=i+1;\n",
    "\n",
    "        \n",
    "#Find the observations that the selected model correctly predicted as faulty based on the previous indexes\n",
    "true_positive_observations = pd.DataFrame()\n",
    "for k in range(0,len(true_positive_indexes)):\n",
    "    new_row = pd.concat([original_X_test.loc[true_positive_indexes[k],:],y.loc[true_positive_indexes[k],:]], axis=0)\n",
    "    true_positive_observations = true_positive_observations.append(new_row, ignore_index=True)\n",
    "\n",
    "    \n",
    "#Find the observations that the selected model correctly predicted correctly as faulty along with the failure modes\n",
    "\n",
    "true_positive_observations_with_failure_modes = pd.DataFrame()\n",
    "#for index1 in range(0,len(true_positive_observations)):\n",
    "    #for index2 in range (0,len(ai4i2020_encoded_balanced)):\n",
    "        #if true_positive_observations.loc[index1,:].equals(ai4i2020_encoded_balanced.loc[index2,\"Type\":\"Machine failure\"]) == True:\n",
    "            #print(index1)\n",
    "            #true_positive_observations_with_failure_modes = true_positive_observations_with_failure_modes.append(ai4i2020_encoded_balanced.loc[index2,:], ignore_index=True)\n",
    "true_positive_observations_with_failure_modes = ai4i2020_encoded_balanced.join(true_positive_observations.set_index(['Type', 'Air temperature [K]', 'Process temperature [K]', 'Rotational speed [rpm]', 'Torque [Nm]', 'Tool wear [min]','Machine failure']), ['Type', 'Air temperature [K]', 'Process temperature [K]', 'Rotational speed [rpm]', 'Torque [Nm]', 'Tool wear [min]','Machine failure'], how='right')       \n",
    "final_true_positive_observations_with_failure_modes = true_positive_observations_with_failure_modes.reset_index(drop=True)\n",
    "\n",
    "display(\"Number of true positive predictions: \" + str(len(final_true_positive_observations_with_failure_modes)))\n",
    "\n",
    "number_of_TWF_failures_in_true_positive_predictions = 0\n",
    "number_of_HDF_failures_in_true_positive_predictions = 0\n",
    "number_of_PWF_failures_in_true_positive_predictions = 0\n",
    "number_of_OSF_failures_in_true_positive_predictions = 0\n",
    "number_of_random_failures_in_true_positive_predictions=0\n",
    "\n",
    "for k in range(0,len(final_true_positive_observations_with_failure_modes)):\n",
    "    if final_true_positive_observations_with_failure_modes.loc[k,\"TWF\"]==1: #if the failure mode is TWF\n",
    "        number_of_TWF_failures_in_true_positive_predictions = number_of_TWF_failures_in_true_positive_predictions + 1;\n",
    "    if final_true_positive_observations_with_failure_modes.loc[k,\"HDF\"]==1: #if the failure mode is HDF\n",
    "        number_of_HDF_failures_in_true_positive_predictions = number_of_HDF_failures_in_true_positive_predictions + 1;\n",
    "    if final_true_positive_observations_with_failure_modes.loc[k,\"PWF\"]==1: #if the failure mode is PWF\n",
    "        number_of_PWF_failures_in_true_positive_predictions = number_of_PWF_failures_in_true_positive_predictions + 1;\n",
    "    if final_true_positive_observations_with_failure_modes.loc[k,\"OSF\"]==1: #if the failure mode is OSF\n",
    "        number_of_OSF_failures_in_true_positive_predictions = number_of_OSF_failures_in_true_positive_predictions + 1;\n",
    "    if (final_true_positive_observations_with_failure_modes.loc[k,\"Machine failure\"]==1) and (final_true_positive_observations_with_failure_modes.loc[k,\"TWF\"]==0) and (final_true_positive_observations_with_failure_modes.loc[k,\"HDF\"]==0) and (final_true_positive_observations_with_failure_modes.loc[k,\"PWF\"]==0) and (final_true_positive_observations_with_failure_modes.loc[k,\"OSF\"]==0) and (final_true_positive_observations_with_failure_modes.loc[k,\"RNF\"]==0):\n",
    "        number_of_random_failures_in_true_positive_predictions = number_of_random_failures_in_true_positive_predictions+1;\n",
    "\n",
    "display(\"Number of TWF failures: \" + str(number_of_TWF_failures_in_true_positive_predictions))\n",
    "display(\"Number of HDF failures: \" + str(number_of_HDF_failures_in_true_positive_predictions))\n",
    "display(\"Number of PWF failures: \" + str(number_of_PWF_failures_in_true_positive_predictions))\n",
    "display(\"Number of OSF failures: \" + str(number_of_OSF_failures_in_true_positive_predictions))\n",
    "display(\"Number of RNF failures: \" + str(number_of_random_failures_in_true_positive_predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "00d61943",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4a910fc3377347b4b460930321ee494f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Text(value='')"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f1db678222dc4d5d86dd5b24c1f7e882",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Output()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Interacitve Widget in order to see each true positive observation along with the failure modes\n",
    "\n",
    "from IPython.display import display\n",
    "from IPython.display import clear_output\n",
    "from ipywidgets import Output\n",
    "from ipywidgets import widgets\n",
    "\n",
    "\n",
    "text = widgets.Text()\n",
    "display(text)\n",
    "\n",
    "out = widgets.Output()\n",
    "display(out)\n",
    "\n",
    "def handle_submit(sender):\n",
    "    with out:\n",
    "        clear_output()\n",
    "        index = int(text.value)\n",
    "        print(final_true_positive_observations_with_failure_modes.loc[index,:])\n",
    "        print('\\n')\n",
    "        print(\"Dataset index for the above true positive observation (starting from 0 index): \" + str(true_positive_indexes[index]))\n",
    "        \n",
    "text.on_submit(handle_submit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "ff7c5722",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TWF: 0.0588 success, HDF: 1.0000 success, PWF: 0.2891 success, OSF: 0.0361 success \n",
      "\n",
      "\n",
      "Through the FCMMC model, 297 correct explanations are made in the true positive predictions with average success: 0.3460 \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Calculate the correct explanations\n",
    "correct_explanations = 0\n",
    "correct_explanations_TWF = 0\n",
    "correct_explanations_HDF = 0\n",
    "correct_explanations_PWF = 0\n",
    "correct_explanations_OSF = 0\n",
    "\n",
    "for k in range(0,len(true_positive_observations)):\n",
    "    #if the failure mode is TWF\n",
    "    if final_true_positive_observations_with_failure_modes.loc[k,\"TWF\"]==1:\n",
    "        #if tool wear is the most important feature\n",
    "        if local_feature_importance_fcmmc.loc[true_positive_indexes[k],\"Tool wear [min]\"] == max(local_feature_importance_fcmmc.loc[true_positive_indexes[k],:]):\n",
    "            correct_explanations = correct_explanations+1;\n",
    "            correct_explanations_TWF = correct_explanations_TWF + 1;\n",
    "    \n",
    "    #if the failure mode is HDF\n",
    "    if final_true_positive_observations_with_failure_modes.loc[k,\"HDF\"]==1: \n",
    "        maximum1 = max(local_feature_importance_fcmmc.loc[true_positive_indexes[k],:]) \n",
    "        maximum2 = max(local_feature_importance_fcmmc.loc[true_positive_indexes[k],:], key = lambda x: min(local_feature_importance_fcmmc.loc[true_positive_indexes[k],:])-1 if (x == maximum1) else x)\n",
    "        if (local_feature_importance_fcmmc.loc[true_positive_indexes[k],\"Air temperature [K]\"] == maximum1) or (local_feature_importance_fcmmc.loc[true_positive_indexes[k],\"Air temperature [K]\"] == maximum2) or (local_feature_importance_fcmmc.loc[true_positive_indexes[k],\"Process temperature [K]\"] == maximum1) or (local_feature_importance_fcmmc.loc[true_positive_indexes[k],\"Process temperature [K]\"] == maximum2):\n",
    "            correct_explanations = correct_explanations+1;\n",
    "            correct_explanations_HDF = correct_explanations_HDF + 1;\n",
    "            \n",
    "    #if the failure mode is PWF\n",
    "    if final_true_positive_observations_with_failure_modes.loc[k,\"PWF\"]==1: \n",
    "        maximum1 = max(local_feature_importance_fcmmc.loc[true_positive_indexes[k],:]) \n",
    "        maximum2 = max(local_feature_importance_fcmmc.loc[true_positive_indexes[k],:], key = lambda x: min(local_feature_importance_fcmmc.loc[true_positive_indexes[k],:])-1 if (x == maximum1) else x)\n",
    "        if (local_feature_importance_fcmmc.loc[true_positive_indexes[k],\"Rotational speed [rpm]\"] == maximum1) or (local_feature_importance_fcmmc.loc[true_positive_indexes[k],\"Rotational speed [rpm]\"] == maximum2) or (local_feature_importance_fcmmc.loc[true_positive_indexes[k],\"Torque [Nm]\"] == maximum1) or (local_feature_importance_fcmmc.loc[true_positive_indexes[k],\"Torque [Nm]\"] == maximum2):\n",
    "            correct_explanations = correct_explanations+1;\n",
    "            correct_explanations_PWF = correct_explanations_PWF + 1;\n",
    "            \n",
    "    #if the failure mode is OSF        \n",
    "    if final_true_positive_observations_with_failure_modes.loc[k,\"OSF\"]==1:\n",
    "        maximum1 = max(local_feature_importance_fcmmc.loc[true_positive_indexes[k],:]) \n",
    "        maximum2 = max(local_feature_importance_fcmmc.loc[true_positive_indexes[k],:], key = lambda x: min(local_feature_importance_fcmmc.loc[true_positive_indexes[k],:])-1 if (x == maximum1) else x)\n",
    "        if (local_feature_importance_fcmmc.loc[true_positive_indexes[k],\"Tool wear [min]\"] == maximum1) or (local_feature_importance_fcmmc.loc[true_positive_indexes[k],\"Tool wear [min]\"] == maximum2) or (local_feature_importance_fcmmc.loc[true_positive_indexes[k],\"Torque [Nm]\"] == maximum1) or (local_feature_importance_fcmmc.loc[true_positive_indexes[k],\"Torque [Nm]\"] == maximum2):\n",
    "            correct_explanations = correct_explanations+1;\n",
    "            correct_explanations_OSF = correct_explanations_OSF + 1;\n",
    "\n",
    "print(\"TWF: %.4f success, HDF: %.4f success, PWF: %.4f success, OSF: %.4f success \\n\\n\" % (correct_explanations_TWF/number_of_TWF_failures_in_true_positive_predictions,correct_explanations_HDF/number_of_HDF_failures_in_true_positive_predictions,correct_explanations_PWF/number_of_PWF_failures_in_true_positive_predictions,correct_explanations_OSF/number_of_OSF_failures_in_true_positive_predictions))\n",
    "\n",
    "average_success = ((correct_explanations_TWF/number_of_TWF_failures_in_true_positive_predictions)+(correct_explanations_HDF/number_of_HDF_failures_in_true_positive_predictions)+(correct_explanations_PWF/number_of_PWF_failures_in_true_positive_predictions)+(correct_explanations_OSF/number_of_OSF_failures_in_true_positive_predictions))/4\n",
    "\n",
    "print(\"Through the FCMMC model, %d correct explanations are made in the true positive predictions with average success: %.4f \\n\\n\" % (correct_explanations, average_success))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8603bce5",
   "metadata": {},
   "source": [
    "Collecting output labels before the FCM converges to an equilibrium point, leads to a confusing interpretation of the investigated system."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "ff38b345",
   "metadata": {},
   "outputs": [],
   "source": [
    "Simulations_for_all_observations_fcmb = []\n",
    "Simulations_for_all_observations_fcmmc = []\n",
    "\n",
    "#For the FCMB Classifier\n",
    "for k in range(0,len(y_test)):\n",
    "    Simulation_for_each_obervation_fcmb = []\n",
    "    for iteration in range(0,5):\n",
    "        Simulation_for_each_obervation_fcmb.append(trj_fcmb_test[iteration][k])\n",
    "    Simulations_for_all_observations_fcmb.append(Simulation_for_each_obervation_fcmb)\n",
    "    \n",
    "#For the FCMMC Classifier\n",
    "for k in range(0,len(y_test)):\n",
    "    Simulation_for_each_obervation_fcmmc = []\n",
    "    for iteration in range(0,5):\n",
    "        Simulation_for_each_obervation_fcmmc.append(trj_fcmmc_test[iteration][k])\n",
    "    Simulations_for_all_observations_fcmmc.append(Simulation_for_each_obervation_fcmmc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "60245d9e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Kappa</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FCMMC</td>\n",
       "      <td>0.900057</td>\n",
       "      <td>0.898387</td>\n",
       "      <td>0.799100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>FCMB</td>\n",
       "      <td>0.862935</td>\n",
       "      <td>0.865607</td>\n",
       "      <td>0.726903</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Model  Accuracy       AUC     Kappa\n",
       "0  FCMMC  0.900057  0.898387  0.799100\n",
       "1   FCMB  0.862935  0.865607  0.726903"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_list = ['FCMB', 'FCMMC']\n",
    "\n",
    "#accuracy and AUC\n",
    "result_df = pd.DataFrame({'Model':model_list, 'Accuracy': acc_list, 'AUC': auc_list, 'Kappa':kappa_list})\n",
    "final_df = result_df.sort_values(by=['AUC'], ascending=False)\n",
    "final_df = final_df.reset_index(drop=True)\n",
    "final_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "9b9fadcc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plot the Inference Process for FCMB model\n",
    "\n",
    "#iterations = np.arange(0,6)\n",
    "#for k in range(0,len(y_test)):\n",
    "#    fig, ax = plt.subplots()\n",
    "#    plt.title(\"Inference Process\") \n",
    "#    plt.xlabel(\"Iterations\") \n",
    "#    plt.ylabel(\"Concepts\") \n",
    "#    plt.plot(iterations,Simulations_for_all_observations_fcmb[k]) \n",
    "#    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "67437372",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plot the Inference Process for FCMMC model\n",
    "\n",
    "#iterations = np.arange(0,6)\n",
    "#for k in range(0,len(y_test)):\n",
    "#    fig, ax = plt.subplots()\n",
    "#    plt.title(\"Inference Process\") \n",
    "#    plt.xlabel(\"Iterations\") \n",
    "#    plt.ylabel(\"Concepts\") \n",
    "#    plt.plot(iterations,Simulations_for_all_observations_fcmmc[k]) \n",
    "#    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "06b057e8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
